# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: '**'
  pull_request:
    branches: [main, master]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v1
        with:
          extra-packages: rcmdcheck

      - uses: r-lib/actions/check-r-package@v1

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Create file with job status
        if: always()
        run: |
          touch ${{ runner.os }}_r${{ matrix.config.r }}.txt
          echo ${{ job.status }} > ${{ runner.os }}_r${{ matrix.config.r }}.txt

      - name: Upload status file as an artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: pass_status_${{ runner.os }}_r${{ matrix.config.r }}
          path: ${{ runner.os }}_r${{ matrix.config.r }}.txt

  Create Slack notification:
    needs: [ubuntu-latest (release), windows-latest (release), ubuntu-latest (devel)]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create short commit sha
        id: set_short_sha
        if: always()
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo ${{matrix.config.os == 'ubuntu-latest'}}

      - name: Download artifact pass_status_ubuntu-latest_rrelease
        uses: actions/download-artifact@v1
        with:
          name: pass_status_ubuntu-latest_rrelease

      - name: Download artifact pass_status_ubuntu-latest_rdevel
        uses: actions/download-artifact@v1
        with:
          name: pass_status_ubuntu-latest_rdevel

      - name: Download artifact pass_status_windows-latest_rrelease
        uses: actions/download-artifact@v1
        with:
          name: pass_status_windows-latest_rrelease

      - name: Set the statuses of each build as output parameters
        id: set_outputs
        run: |
          echo "::set-output name=status_urel::$(<pass_status_ubuntu-latest_rrelease/ubuntu-latest_rrelease.txt)"
          echo "::set-output name=status_wrel::$(<pass_status_windows-latest_rrelease/windows-latest_rrelease.txt)"
          echo "::set-output name=status_udev::$(<pass_status_ubuntu-latest_rdevel/ubuntu-latest_rdevel.txt)"

      - name: Show the values of the outputs
        run: |
          # using the syntax steps.<step_id>.outputs.<output_name> to access the output parameters
          echo "status_urel = ${{ steps.set_outputs.outputs.status_urel }}"
          echo "status_udev = ${{ steps.set_outputs.outputs.status_udev }}"
          echo "status_wrel = ${{ steps.set_outputs.outputs.status_wrel }}"
          echo "short_sha = ${{ steps.set_short_sha.outputs.short_sha }}"

      - name: Send success JSON data to Slack workflow
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.16.0
        with:
          channel: '#github-notifications'
          payload: "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Workflow ${{github.job}} for commit ${{ steps.set_short_sha.outputs.short_sha }} in ${{github.repository}} by ${{github.actor}}.\"},\"accessory\":{\"type\":\"button\",\"text\":{\"type\":\"plain_text\",\"text\":\"Run #${{github.run_number}}\",\"emoji\":true},\"value\":\"click_me_123\",\"url\":\"${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}\",\"action_id\":\"button-action\"}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Ubuntu-latest (R-release): *${{ steps.set_outputs.outputs.status_urel }}*, Ubuntu-latest (R-devel): *${{ steps.set_outputs.outputs.status_udev }}*, Windows (R-release): *${{ steps.set_outputs.outputs.status_wrel }}*\"},\"accessory\":{\"type\":\"button\",\"text\":{\"type\":\"plain_text\",\"text\":\"View commit\",\"emoji\":true},\"value\":\"click_me_123\",\"url\":\"${{github.server_url}}/${{github.repository}}/commit/${{github.sha}}\",\"action_id\":\"button-action\"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
